from fastapi import FastAPI, Response
import docker
import os
import logging
import re


app = FastAPI()
client = docker.from_env()

# üìÅ Unraid Container-Icon-Pfad
UNRAID_ICON_PATH = "/var/lib/docker/unraid/images/"

def format_image_name(image_name):
    """ Entfernt Tag und ersetzt / durch - f√ºr die Icon-Dateinamen """
    base_image = image_name.split(":")[0]  # Entfernt Tag (`:latest`)
    formatted_name = base_image.replace("/", "-").lower()  # `vaultwarden/server` ‚Üí `vaultwarden-server`
    return formatted_name

def list_containers():
    containers = []
    for container in client.containers.list(all=True):
        image_name = container.image.tags[0] if container.image.tags else "unknown"
        formatted_name = format_image_name(image_name)
        labels = container.attrs["Config"]["Labels"]
        raw_webui = labels.get("net.unraid.docker.webui")
        
        ports = container.attrs["NetworkSettings"]["Ports"]
        web_port = None
        for internal_port, bindings in ports.items():
            if bindings:
                host_port = bindings[0]["HostPort"]
                # Optional: filtere nach bekannten Web-Ports
                if "80" in internal_port or "443" in internal_port or "3000" in internal_port or "8080" in internal_port:
                    web_port = host_port
                    break  # Stop after first valid match
                    
        if web_port:
            raw_webui = raw_webui.replace("[IP]","192.168.178.10")
            match = re.search(r"\[PORT:(\d+)\]", raw_webui)
            if match:
                raw_webui = re.sub(r"\[PORT:\d+\]", web_port, raw_webui)
    
            

        # üîç REST-URL f√ºr das Bild
        icon_url = f"http://192.168.178.10:8096/containers/container-image/{container.name}-icon"

        containers.append({
            "id": container.short_id,
            "name": container.name,
            "status": container.status,
            "image": image_name,
            "logo": icon_url,  # Jetzt REST-API URL statt Datei-Pfad
            "webui": raw_webui

        })
    
    return containers

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_image(image_name: str):
    image_path = f"{UNRAID_ICON_PATH}{image_name}.png"
    
    logger.info(f"Looking for image at path: {image_path}")

    if os.path.exists(image_path):
        logger.info(f"Image found at {image_path}")
        with open(image_path, "rb") as image_file:
            return Response(content=image_file.read(), media_type="image/png")
    else:
        logger.error(f"Image not found at {image_path}")
        return Response(status_code=404)  # Bild nicht gefunden

def start_container(container_id):
    container = client.containers.get(container_id)
    container.start()
    return {"message": f"Container {container.name} gestartet"}

def stop_container(container_id):
    container = client.containers.get(container_id)
    container.stop()
    return {"message": f"Container {container.name} gestoppt"}

def show_logs(container_id):
    container = client.containers.get(container_id)
    return container.logs().decode('utf-8')
